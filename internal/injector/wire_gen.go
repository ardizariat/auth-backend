// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"arch/internal/config"
	"arch/internal/delivery/http/controller"
	"arch/internal/delivery/http/middleware"
	"arch/internal/delivery/http/route"
	"arch/internal/gateway/producer"
	"arch/internal/repository"
	"arch/internal/usecase"
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
)

// Injectors from injector.go:

func InitializeServer() *fiber.App {
	viper := config.NewViper()
	logger := config.NewLogrus(viper)
	db := config.NewDatabase(viper, logger)
	client := config.NewRedis(viper, logger)
	jwtWrapper := config.NewJwtWrapper(viper, logger)
	rabbitMQProducer := producer.NewRabbitMQProducer(viper, logger)
	s3Client := config.NewAwsS3(viper, logger)
	userRepository := repository.NewUserRepository(logger)
	authUseCase := usecase.NewAuthUseCase(viper, logger, db, client, jwtWrapper, rabbitMQProducer, s3Client, userRepository)
	authJwtMiddleware := middleware.NewAuthJwtMiddleware(authUseCase)
	validate := config.NewValidator()
	authController := controller.NewAuthController(validate, logger, authUseCase)
	routeApp := route.NewRouteApp(authJwtMiddleware, authController)
	app := config.NewFiber(routeApp, viper)
	return app
}

// injector.go:

var configSet = wire.NewSet(config.NewViper, config.NewLogrus, config.NewDatabase, config.NewValidator, config.NewRedis, config.NewJwtWrapper, config.NewAwsS3)

var repositorySet = wire.NewSet(repository.NewUserRepository)

var rabbitMQProducerSet = wire.NewSet(producer.NewRabbitMQProducer)

var useCaseSet = wire.NewSet(usecase.NewAuthUseCase)

var controllerSet = wire.NewSet(controller.NewAuthController)

var middlewareSet = wire.NewSet(middleware.NewAuthJwtMiddleware)
